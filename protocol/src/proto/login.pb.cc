// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/login.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace login {
class signinDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<signin> {
} _signin_default_instance_;
class signupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<signup> {
} _signup_default_instance_;
class signin_retDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<signin_ret> {
} _signin_ret_default_instance_;
class pingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ping> {
} _ping_default_instance_;
class pongDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<pong> {
} _pong_default_instance_;

namespace protobuf_proto_2flogin_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signin, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signin, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signin, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signin, passwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signin, sdkid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signup, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signup, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signup, passwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signup, sdkid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signin_ret, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ping, hello_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pong, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pong, hello_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(signin)},
  { 9, -1, sizeof(signup)},
  { 17, -1, sizeof(signin_ret)},
  { 21, -1, sizeof(ping)},
  { 26, -1, sizeof(pong)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_signin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_signup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_signin_ret_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ping_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_pong_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "proto/login.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _signin_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _signup_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _signin_ret_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _ping_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _pong_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _signin_default_instance_.DefaultConstruct();
  _signup_default_instance_.DefaultConstruct();
  _signin_ret_default_instance_.DefaultConstruct();
  _ping_default_instance_.DefaultConstruct();
  _pong_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\021proto/login.proto\022\005login\"P\n\006signin\022\r\n\005"
      "token\030\001 \001(\t\022\n\n\002id\030\002 \001(\005\022\014\n\004name\030\003 \001(\t\022\016\n"
      "\006passwd\030\004 \001(\t\022\r\n\005sdkid\030\005 \001(\t\"D\n\006signup\022\r"
      "\n\005token\030\001 \001(\t\022\014\n\004name\030\003 \001(\t\022\016\n\006passwd\030\004 "
      "\001(\t\022\r\n\005sdkid\030\005 \001(\t\"\014\n\nsignin_ret\"\025\n\004ping"
      "\022\r\n\005hello\030\001 \001(\t\"\025\n\004pong\022\r\n\005hello\030\001 \001(\tb\006"
      "proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 246);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/login.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_proto_2flogin_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int signin::kTokenFieldNumber;
const int signin::kIdFieldNumber;
const int signin::kNameFieldNumber;
const int signin::kPasswdFieldNumber;
const int signin::kSdkidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

signin::signin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2flogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:login.signin)
}
signin::signin(const signin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  passwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.passwd().size() > 0) {
    passwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.passwd_);
  }
  sdkid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sdkid().size() > 0) {
    sdkid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sdkid_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:login.signin)
}

void signin::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sdkid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _cached_size_ = 0;
}

signin::~signin() {
  // @@protoc_insertion_point(destructor:login.signin)
  SharedDtor();
}

void signin::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sdkid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void signin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* signin::descriptor() {
  protobuf_proto_2flogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2flogin_2eproto::file_level_metadata[0].descriptor;
}

const signin& signin::default_instance() {
  protobuf_proto_2flogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

signin* signin::New(::google::protobuf::Arena* arena) const {
  signin* n = new signin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void signin::Clear() {
// @@protoc_insertion_point(message_clear_start:login.signin)
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sdkid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

bool signin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:login.signin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string token = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "login.signin.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "login.signin.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string passwd = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "login.signin.passwd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sdkid = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdkid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sdkid().data(), this->sdkid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "login.signin.sdkid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:login.signin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:login.signin)
  return false;
#undef DO_
}

void signin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:login.signin)
  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "login.signin.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "login.signin.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // string passwd = 4;
  if (this->passwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "login.signin.passwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->passwd(), output);
  }

  // string sdkid = 5;
  if (this->sdkid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sdkid().data(), this->sdkid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "login.signin.sdkid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sdkid(), output);
  }

  // @@protoc_insertion_point(serialize_end:login.signin)
}

::google::protobuf::uint8* signin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:login.signin)
  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "login.signin.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "login.signin.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // string passwd = 4;
  if (this->passwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "login.signin.passwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->passwd(), target);
  }

  // string sdkid = 5;
  if (this->sdkid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sdkid().data(), this->sdkid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "login.signin.sdkid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sdkid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:login.signin)
  return target;
}

size_t signin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:login.signin)
  size_t total_size = 0;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string passwd = 4;
  if (this->passwd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->passwd());
  }

  // string sdkid = 5;
  if (this->sdkid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sdkid());
  }

  // int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void signin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:login.signin)
  GOOGLE_DCHECK_NE(&from, this);
  const signin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const signin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:login.signin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:login.signin)
    MergeFrom(*source);
  }
}

void signin::MergeFrom(const signin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:login.signin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.passwd().size() > 0) {

    passwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.passwd_);
  }
  if (from.sdkid().size() > 0) {

    sdkid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sdkid_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void signin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:login.signin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void signin::CopyFrom(const signin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:login.signin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool signin::IsInitialized() const {
  return true;
}

void signin::Swap(signin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void signin::InternalSwap(signin* other) {
  token_.Swap(&other->token_);
  name_.Swap(&other->name_);
  passwd_.Swap(&other->passwd_);
  sdkid_.Swap(&other->sdkid_);
  std::swap(id_, other->id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata signin::GetMetadata() const {
  protobuf_proto_2flogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2flogin_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// signin

// string token = 1;
void signin::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& signin::token() const {
  // @@protoc_insertion_point(field_get:login.signin.token)
  return token_.GetNoArena();
}
void signin::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:login.signin.token)
}
#if LANG_CXX11
void signin::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login.signin.token)
}
#endif
void signin::set_token(const char* value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login.signin.token)
}
void signin::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login.signin.token)
}
::std::string* signin::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:login.signin.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* signin::release_token() {
  // @@protoc_insertion_point(field_release:login.signin.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void signin::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:login.signin.token)
}

// int32 id = 2;
void signin::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 signin::id() const {
  // @@protoc_insertion_point(field_get:login.signin.id)
  return id_;
}
void signin::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:login.signin.id)
}

// string name = 3;
void signin::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& signin::name() const {
  // @@protoc_insertion_point(field_get:login.signin.name)
  return name_.GetNoArena();
}
void signin::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:login.signin.name)
}
#if LANG_CXX11
void signin::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login.signin.name)
}
#endif
void signin::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login.signin.name)
}
void signin::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login.signin.name)
}
::std::string* signin::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:login.signin.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* signin::release_name() {
  // @@protoc_insertion_point(field_release:login.signin.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void signin::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:login.signin.name)
}

// string passwd = 4;
void signin::clear_passwd() {
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& signin::passwd() const {
  // @@protoc_insertion_point(field_get:login.signin.passwd)
  return passwd_.GetNoArena();
}
void signin::set_passwd(const ::std::string& value) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:login.signin.passwd)
}
#if LANG_CXX11
void signin::set_passwd(::std::string&& value) {
  
  passwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login.signin.passwd)
}
#endif
void signin::set_passwd(const char* value) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login.signin.passwd)
}
void signin::set_passwd(const char* value, size_t size) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login.signin.passwd)
}
::std::string* signin::mutable_passwd() {
  
  // @@protoc_insertion_point(field_mutable:login.signin.passwd)
  return passwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* signin::release_passwd() {
  // @@protoc_insertion_point(field_release:login.signin.passwd)
  
  return passwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void signin::set_allocated_passwd(::std::string* passwd) {
  if (passwd != NULL) {
    
  } else {
    
  }
  passwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passwd);
  // @@protoc_insertion_point(field_set_allocated:login.signin.passwd)
}

// string sdkid = 5;
void signin::clear_sdkid() {
  sdkid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& signin::sdkid() const {
  // @@protoc_insertion_point(field_get:login.signin.sdkid)
  return sdkid_.GetNoArena();
}
void signin::set_sdkid(const ::std::string& value) {
  
  sdkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:login.signin.sdkid)
}
#if LANG_CXX11
void signin::set_sdkid(::std::string&& value) {
  
  sdkid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login.signin.sdkid)
}
#endif
void signin::set_sdkid(const char* value) {
  
  sdkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login.signin.sdkid)
}
void signin::set_sdkid(const char* value, size_t size) {
  
  sdkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login.signin.sdkid)
}
::std::string* signin::mutable_sdkid() {
  
  // @@protoc_insertion_point(field_mutable:login.signin.sdkid)
  return sdkid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* signin::release_sdkid() {
  // @@protoc_insertion_point(field_release:login.signin.sdkid)
  
  return sdkid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void signin::set_allocated_sdkid(::std::string* sdkid) {
  if (sdkid != NULL) {
    
  } else {
    
  }
  sdkid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdkid);
  // @@protoc_insertion_point(field_set_allocated:login.signin.sdkid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int signup::kTokenFieldNumber;
const int signup::kNameFieldNumber;
const int signup::kPasswdFieldNumber;
const int signup::kSdkidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

signup::signup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2flogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:login.signup)
}
signup::signup(const signup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  passwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.passwd().size() > 0) {
    passwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.passwd_);
  }
  sdkid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sdkid().size() > 0) {
    sdkid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sdkid_);
  }
  // @@protoc_insertion_point(copy_constructor:login.signup)
}

void signup::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sdkid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

signup::~signup() {
  // @@protoc_insertion_point(destructor:login.signup)
  SharedDtor();
}

void signup::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sdkid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void signup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* signup::descriptor() {
  protobuf_proto_2flogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2flogin_2eproto::file_level_metadata[1].descriptor;
}

const signup& signup::default_instance() {
  protobuf_proto_2flogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

signup* signup::New(::google::protobuf::Arena* arena) const {
  signup* n = new signup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void signup::Clear() {
// @@protoc_insertion_point(message_clear_start:login.signup)
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sdkid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool signup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:login.signup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string token = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "login.signup.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "login.signup.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string passwd = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "login.signup.passwd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sdkid = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdkid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sdkid().data(), this->sdkid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "login.signup.sdkid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:login.signup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:login.signup)
  return false;
#undef DO_
}

void signup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:login.signup)
  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "login.signup.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "login.signup.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // string passwd = 4;
  if (this->passwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "login.signup.passwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->passwd(), output);
  }

  // string sdkid = 5;
  if (this->sdkid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sdkid().data(), this->sdkid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "login.signup.sdkid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sdkid(), output);
  }

  // @@protoc_insertion_point(serialize_end:login.signup)
}

::google::protobuf::uint8* signup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:login.signup)
  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "login.signup.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "login.signup.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // string passwd = 4;
  if (this->passwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "login.signup.passwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->passwd(), target);
  }

  // string sdkid = 5;
  if (this->sdkid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sdkid().data(), this->sdkid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "login.signup.sdkid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sdkid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:login.signup)
  return target;
}

size_t signup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:login.signup)
  size_t total_size = 0;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string passwd = 4;
  if (this->passwd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->passwd());
  }

  // string sdkid = 5;
  if (this->sdkid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sdkid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void signup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:login.signup)
  GOOGLE_DCHECK_NE(&from, this);
  const signup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const signup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:login.signup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:login.signup)
    MergeFrom(*source);
  }
}

void signup::MergeFrom(const signup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:login.signup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.passwd().size() > 0) {

    passwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.passwd_);
  }
  if (from.sdkid().size() > 0) {

    sdkid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sdkid_);
  }
}

void signup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:login.signup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void signup::CopyFrom(const signup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:login.signup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool signup::IsInitialized() const {
  return true;
}

void signup::Swap(signup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void signup::InternalSwap(signup* other) {
  token_.Swap(&other->token_);
  name_.Swap(&other->name_);
  passwd_.Swap(&other->passwd_);
  sdkid_.Swap(&other->sdkid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata signup::GetMetadata() const {
  protobuf_proto_2flogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2flogin_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// signup

// string token = 1;
void signup::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& signup::token() const {
  // @@protoc_insertion_point(field_get:login.signup.token)
  return token_.GetNoArena();
}
void signup::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:login.signup.token)
}
#if LANG_CXX11
void signup::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login.signup.token)
}
#endif
void signup::set_token(const char* value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login.signup.token)
}
void signup::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login.signup.token)
}
::std::string* signup::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:login.signup.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* signup::release_token() {
  // @@protoc_insertion_point(field_release:login.signup.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void signup::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:login.signup.token)
}

// string name = 3;
void signup::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& signup::name() const {
  // @@protoc_insertion_point(field_get:login.signup.name)
  return name_.GetNoArena();
}
void signup::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:login.signup.name)
}
#if LANG_CXX11
void signup::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login.signup.name)
}
#endif
void signup::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login.signup.name)
}
void signup::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login.signup.name)
}
::std::string* signup::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:login.signup.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* signup::release_name() {
  // @@protoc_insertion_point(field_release:login.signup.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void signup::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:login.signup.name)
}

// string passwd = 4;
void signup::clear_passwd() {
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& signup::passwd() const {
  // @@protoc_insertion_point(field_get:login.signup.passwd)
  return passwd_.GetNoArena();
}
void signup::set_passwd(const ::std::string& value) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:login.signup.passwd)
}
#if LANG_CXX11
void signup::set_passwd(::std::string&& value) {
  
  passwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login.signup.passwd)
}
#endif
void signup::set_passwd(const char* value) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login.signup.passwd)
}
void signup::set_passwd(const char* value, size_t size) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login.signup.passwd)
}
::std::string* signup::mutable_passwd() {
  
  // @@protoc_insertion_point(field_mutable:login.signup.passwd)
  return passwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* signup::release_passwd() {
  // @@protoc_insertion_point(field_release:login.signup.passwd)
  
  return passwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void signup::set_allocated_passwd(::std::string* passwd) {
  if (passwd != NULL) {
    
  } else {
    
  }
  passwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passwd);
  // @@protoc_insertion_point(field_set_allocated:login.signup.passwd)
}

// string sdkid = 5;
void signup::clear_sdkid() {
  sdkid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& signup::sdkid() const {
  // @@protoc_insertion_point(field_get:login.signup.sdkid)
  return sdkid_.GetNoArena();
}
void signup::set_sdkid(const ::std::string& value) {
  
  sdkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:login.signup.sdkid)
}
#if LANG_CXX11
void signup::set_sdkid(::std::string&& value) {
  
  sdkid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login.signup.sdkid)
}
#endif
void signup::set_sdkid(const char* value) {
  
  sdkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login.signup.sdkid)
}
void signup::set_sdkid(const char* value, size_t size) {
  
  sdkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login.signup.sdkid)
}
::std::string* signup::mutable_sdkid() {
  
  // @@protoc_insertion_point(field_mutable:login.signup.sdkid)
  return sdkid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* signup::release_sdkid() {
  // @@protoc_insertion_point(field_release:login.signup.sdkid)
  
  return sdkid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void signup::set_allocated_sdkid(::std::string* sdkid) {
  if (sdkid != NULL) {
    
  } else {
    
  }
  sdkid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdkid);
  // @@protoc_insertion_point(field_set_allocated:login.signup.sdkid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

signin_ret::signin_ret()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2flogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:login.signin_ret)
}
signin_ret::signin_ret(const signin_ret& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:login.signin_ret)
}

void signin_ret::SharedCtor() {
  _cached_size_ = 0;
}

signin_ret::~signin_ret() {
  // @@protoc_insertion_point(destructor:login.signin_ret)
  SharedDtor();
}

void signin_ret::SharedDtor() {
}

void signin_ret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* signin_ret::descriptor() {
  protobuf_proto_2flogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2flogin_2eproto::file_level_metadata[2].descriptor;
}

const signin_ret& signin_ret::default_instance() {
  protobuf_proto_2flogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

signin_ret* signin_ret::New(::google::protobuf::Arena* arena) const {
  signin_ret* n = new signin_ret;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void signin_ret::Clear() {
// @@protoc_insertion_point(message_clear_start:login.signin_ret)
}

bool signin_ret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:login.signin_ret)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:login.signin_ret)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:login.signin_ret)
  return false;
#undef DO_
}

void signin_ret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:login.signin_ret)
  // @@protoc_insertion_point(serialize_end:login.signin_ret)
}

::google::protobuf::uint8* signin_ret::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:login.signin_ret)
  // @@protoc_insertion_point(serialize_to_array_end:login.signin_ret)
  return target;
}

size_t signin_ret::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:login.signin_ret)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void signin_ret::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:login.signin_ret)
  GOOGLE_DCHECK_NE(&from, this);
  const signin_ret* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const signin_ret>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:login.signin_ret)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:login.signin_ret)
    MergeFrom(*source);
  }
}

void signin_ret::MergeFrom(const signin_ret& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:login.signin_ret)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void signin_ret::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:login.signin_ret)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void signin_ret::CopyFrom(const signin_ret& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:login.signin_ret)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool signin_ret::IsInitialized() const {
  return true;
}

void signin_ret::Swap(signin_ret* other) {
  if (other == this) return;
  InternalSwap(other);
}
void signin_ret::InternalSwap(signin_ret* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata signin_ret::GetMetadata() const {
  protobuf_proto_2flogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2flogin_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// signin_ret

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ping::kHelloFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ping::ping()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2flogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:login.ping)
}
ping::ping(const ping& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hello_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hello().size() > 0) {
    hello_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hello_);
  }
  // @@protoc_insertion_point(copy_constructor:login.ping)
}

void ping::SharedCtor() {
  hello_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ping::~ping() {
  // @@protoc_insertion_point(destructor:login.ping)
  SharedDtor();
}

void ping::SharedDtor() {
  hello_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ping::descriptor() {
  protobuf_proto_2flogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2flogin_2eproto::file_level_metadata[3].descriptor;
}

const ping& ping::default_instance() {
  protobuf_proto_2flogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

ping* ping::New(::google::protobuf::Arena* arena) const {
  ping* n = new ping;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ping::Clear() {
// @@protoc_insertion_point(message_clear_start:login.ping)
  hello_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:login.ping)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string hello = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hello()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hello().data(), this->hello().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "login.ping.hello"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:login.ping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:login.ping)
  return false;
#undef DO_
}

void ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:login.ping)
  // string hello = 1;
  if (this->hello().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hello().data(), this->hello().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "login.ping.hello");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hello(), output);
  }

  // @@protoc_insertion_point(serialize_end:login.ping)
}

::google::protobuf::uint8* ping::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:login.ping)
  // string hello = 1;
  if (this->hello().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hello().data(), this->hello().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "login.ping.hello");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hello(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:login.ping)
  return target;
}

size_t ping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:login.ping)
  size_t total_size = 0;

  // string hello = 1;
  if (this->hello().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hello());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ping::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:login.ping)
  GOOGLE_DCHECK_NE(&from, this);
  const ping* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ping>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:login.ping)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:login.ping)
    MergeFrom(*source);
  }
}

void ping::MergeFrom(const ping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:login.ping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.hello().size() > 0) {

    hello_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hello_);
  }
}

void ping::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:login.ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ping::CopyFrom(const ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:login.ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ping::IsInitialized() const {
  return true;
}

void ping::Swap(ping* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ping::InternalSwap(ping* other) {
  hello_.Swap(&other->hello_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ping::GetMetadata() const {
  protobuf_proto_2flogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2flogin_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ping

// string hello = 1;
void ping::clear_hello() {
  hello_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ping::hello() const {
  // @@protoc_insertion_point(field_get:login.ping.hello)
  return hello_.GetNoArena();
}
void ping::set_hello(const ::std::string& value) {
  
  hello_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:login.ping.hello)
}
#if LANG_CXX11
void ping::set_hello(::std::string&& value) {
  
  hello_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login.ping.hello)
}
#endif
void ping::set_hello(const char* value) {
  
  hello_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login.ping.hello)
}
void ping::set_hello(const char* value, size_t size) {
  
  hello_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login.ping.hello)
}
::std::string* ping::mutable_hello() {
  
  // @@protoc_insertion_point(field_mutable:login.ping.hello)
  return hello_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ping::release_hello() {
  // @@protoc_insertion_point(field_release:login.ping.hello)
  
  return hello_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ping::set_allocated_hello(::std::string* hello) {
  if (hello != NULL) {
    
  } else {
    
  }
  hello_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hello);
  // @@protoc_insertion_point(field_set_allocated:login.ping.hello)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int pong::kHelloFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

pong::pong()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2flogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:login.pong)
}
pong::pong(const pong& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hello_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hello().size() > 0) {
    hello_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hello_);
  }
  // @@protoc_insertion_point(copy_constructor:login.pong)
}

void pong::SharedCtor() {
  hello_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

pong::~pong() {
  // @@protoc_insertion_point(destructor:login.pong)
  SharedDtor();
}

void pong::SharedDtor() {
  hello_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void pong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pong::descriptor() {
  protobuf_proto_2flogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2flogin_2eproto::file_level_metadata[4].descriptor;
}

const pong& pong::default_instance() {
  protobuf_proto_2flogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

pong* pong::New(::google::protobuf::Arena* arena) const {
  pong* n = new pong;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void pong::Clear() {
// @@protoc_insertion_point(message_clear_start:login.pong)
  hello_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool pong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:login.pong)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string hello = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hello()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hello().data(), this->hello().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "login.pong.hello"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:login.pong)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:login.pong)
  return false;
#undef DO_
}

void pong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:login.pong)
  // string hello = 1;
  if (this->hello().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hello().data(), this->hello().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "login.pong.hello");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hello(), output);
  }

  // @@protoc_insertion_point(serialize_end:login.pong)
}

::google::protobuf::uint8* pong::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:login.pong)
  // string hello = 1;
  if (this->hello().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hello().data(), this->hello().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "login.pong.hello");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hello(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:login.pong)
  return target;
}

size_t pong::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:login.pong)
  size_t total_size = 0;

  // string hello = 1;
  if (this->hello().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hello());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pong::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:login.pong)
  GOOGLE_DCHECK_NE(&from, this);
  const pong* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const pong>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:login.pong)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:login.pong)
    MergeFrom(*source);
  }
}

void pong::MergeFrom(const pong& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:login.pong)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.hello().size() > 0) {

    hello_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hello_);
  }
}

void pong::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:login.pong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pong::CopyFrom(const pong& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:login.pong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pong::IsInitialized() const {
  return true;
}

void pong::Swap(pong* other) {
  if (other == this) return;
  InternalSwap(other);
}
void pong::InternalSwap(pong* other) {
  hello_.Swap(&other->hello_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata pong::GetMetadata() const {
  protobuf_proto_2flogin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2flogin_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// pong

// string hello = 1;
void pong::clear_hello() {
  hello_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& pong::hello() const {
  // @@protoc_insertion_point(field_get:login.pong.hello)
  return hello_.GetNoArena();
}
void pong::set_hello(const ::std::string& value) {
  
  hello_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:login.pong.hello)
}
#if LANG_CXX11
void pong::set_hello(::std::string&& value) {
  
  hello_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login.pong.hello)
}
#endif
void pong::set_hello(const char* value) {
  
  hello_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login.pong.hello)
}
void pong::set_hello(const char* value, size_t size) {
  
  hello_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login.pong.hello)
}
::std::string* pong::mutable_hello() {
  
  // @@protoc_insertion_point(field_mutable:login.pong.hello)
  return hello_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* pong::release_hello() {
  // @@protoc_insertion_point(field_release:login.pong.hello)
  
  return hello_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void pong::set_allocated_hello(::std::string* hello) {
  if (hello != NULL) {
    
  } else {
    
  }
  hello_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hello);
  // @@protoc_insertion_point(field_set_allocated:login.pong.hello)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace login

// @@protoc_insertion_point(global_scope)
