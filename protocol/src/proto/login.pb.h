// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/login.proto

#ifndef PROTOBUF_proto_2flogin_2eproto__INCLUDED
#define PROTOBUF_proto_2flogin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace login {
class ping;
class pingDefaultTypeInternal;
extern pingDefaultTypeInternal _ping_default_instance_;
class pong;
class pongDefaultTypeInternal;
extern pongDefaultTypeInternal _pong_default_instance_;
class signin;
class signinDefaultTypeInternal;
extern signinDefaultTypeInternal _signin_default_instance_;
class signup;
class signupDefaultTypeInternal;
extern signupDefaultTypeInternal _signup_default_instance_;
}  // namespace login

namespace login {

namespace protobuf_proto_2flogin_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_proto_2flogin_2eproto

// ===================================================================

class signin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:login.signin) */ {
 public:
  signin();
  virtual ~signin();

  signin(const signin& from);

  inline signin& operator=(const signin& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const signin& default_instance();

  static inline const signin* internal_default_instance() {
    return reinterpret_cast<const signin*>(
               &_signin_default_instance_);
  }

  void Swap(signin* other);

  // implements Message ----------------------------------------------

  inline signin* New() const PROTOBUF_FINAL { return New(NULL); }

  signin* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const signin& from);
  void MergeFrom(const signin& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(signin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string passwd = 4;
  void clear_passwd();
  static const int kPasswdFieldNumber = 4;
  const ::std::string& passwd() const;
  void set_passwd(const ::std::string& value);
  #if LANG_CXX11
  void set_passwd(::std::string&& value);
  #endif
  void set_passwd(const char* value);
  void set_passwd(const char* value, size_t size);
  ::std::string* mutable_passwd();
  ::std::string* release_passwd();
  void set_allocated_passwd(::std::string* passwd);

  // string sdkid = 5;
  void clear_sdkid();
  static const int kSdkidFieldNumber = 5;
  const ::std::string& sdkid() const;
  void set_sdkid(const ::std::string& value);
  #if LANG_CXX11
  void set_sdkid(::std::string&& value);
  #endif
  void set_sdkid(const char* value);
  void set_sdkid(const char* value, size_t size);
  ::std::string* mutable_sdkid();
  ::std::string* release_sdkid();
  void set_allocated_sdkid(::std::string* sdkid);

  // int32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:login.signin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr passwd_;
  ::google::protobuf::internal::ArenaStringPtr sdkid_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend struct  protobuf_proto_2flogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class signup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:login.signup) */ {
 public:
  signup();
  virtual ~signup();

  signup(const signup& from);

  inline signup& operator=(const signup& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const signup& default_instance();

  static inline const signup* internal_default_instance() {
    return reinterpret_cast<const signup*>(
               &_signup_default_instance_);
  }

  void Swap(signup* other);

  // implements Message ----------------------------------------------

  inline signup* New() const PROTOBUF_FINAL { return New(NULL); }

  signup* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const signup& from);
  void MergeFrom(const signup& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(signup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string passwd = 4;
  void clear_passwd();
  static const int kPasswdFieldNumber = 4;
  const ::std::string& passwd() const;
  void set_passwd(const ::std::string& value);
  #if LANG_CXX11
  void set_passwd(::std::string&& value);
  #endif
  void set_passwd(const char* value);
  void set_passwd(const char* value, size_t size);
  ::std::string* mutable_passwd();
  ::std::string* release_passwd();
  void set_allocated_passwd(::std::string* passwd);

  // string sdkid = 5;
  void clear_sdkid();
  static const int kSdkidFieldNumber = 5;
  const ::std::string& sdkid() const;
  void set_sdkid(const ::std::string& value);
  #if LANG_CXX11
  void set_sdkid(::std::string&& value);
  #endif
  void set_sdkid(const char* value);
  void set_sdkid(const char* value, size_t size);
  ::std::string* mutable_sdkid();
  ::std::string* release_sdkid();
  void set_allocated_sdkid(::std::string* sdkid);

  // @@protoc_insertion_point(class_scope:login.signup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr passwd_;
  ::google::protobuf::internal::ArenaStringPtr sdkid_;
  mutable int _cached_size_;
  friend struct  protobuf_proto_2flogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ping : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:login.ping) */ {
 public:
  ping();
  virtual ~ping();

  ping(const ping& from);

  inline ping& operator=(const ping& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ping& default_instance();

  static inline const ping* internal_default_instance() {
    return reinterpret_cast<const ping*>(
               &_ping_default_instance_);
  }

  void Swap(ping* other);

  // implements Message ----------------------------------------------

  inline ping* New() const PROTOBUF_FINAL { return New(NULL); }

  ping* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ping& from);
  void MergeFrom(const ping& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ping* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string hello = 1;
  void clear_hello();
  static const int kHelloFieldNumber = 1;
  const ::std::string& hello() const;
  void set_hello(const ::std::string& value);
  #if LANG_CXX11
  void set_hello(::std::string&& value);
  #endif
  void set_hello(const char* value);
  void set_hello(const char* value, size_t size);
  ::std::string* mutable_hello();
  ::std::string* release_hello();
  void set_allocated_hello(::std::string* hello);

  // @@protoc_insertion_point(class_scope:login.ping)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr hello_;
  mutable int _cached_size_;
  friend struct  protobuf_proto_2flogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class pong : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:login.pong) */ {
 public:
  pong();
  virtual ~pong();

  pong(const pong& from);

  inline pong& operator=(const pong& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pong& default_instance();

  static inline const pong* internal_default_instance() {
    return reinterpret_cast<const pong*>(
               &_pong_default_instance_);
  }

  void Swap(pong* other);

  // implements Message ----------------------------------------------

  inline pong* New() const PROTOBUF_FINAL { return New(NULL); }

  pong* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const pong& from);
  void MergeFrom(const pong& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(pong* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string hello = 1;
  void clear_hello();
  static const int kHelloFieldNumber = 1;
  const ::std::string& hello() const;
  void set_hello(const ::std::string& value);
  #if LANG_CXX11
  void set_hello(::std::string&& value);
  #endif
  void set_hello(const char* value);
  void set_hello(const char* value, size_t size);
  ::std::string* mutable_hello();
  ::std::string* release_hello();
  void set_allocated_hello(::std::string* hello);

  // @@protoc_insertion_point(class_scope:login.pong)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr hello_;
  mutable int _cached_size_;
  friend struct  protobuf_proto_2flogin_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// signin

// string token = 1;
inline void signin::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& signin::token() const {
  // @@protoc_insertion_point(field_get:login.signin.token)
  return token_.GetNoArena();
}
inline void signin::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:login.signin.token)
}
#if LANG_CXX11
inline void signin::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login.signin.token)
}
#endif
inline void signin::set_token(const char* value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login.signin.token)
}
inline void signin::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login.signin.token)
}
inline ::std::string* signin::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:login.signin.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* signin::release_token() {
  // @@protoc_insertion_point(field_release:login.signin.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void signin::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:login.signin.token)
}

// int32 id = 2;
inline void signin::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 signin::id() const {
  // @@protoc_insertion_point(field_get:login.signin.id)
  return id_;
}
inline void signin::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:login.signin.id)
}

// string name = 3;
inline void signin::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& signin::name() const {
  // @@protoc_insertion_point(field_get:login.signin.name)
  return name_.GetNoArena();
}
inline void signin::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:login.signin.name)
}
#if LANG_CXX11
inline void signin::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login.signin.name)
}
#endif
inline void signin::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login.signin.name)
}
inline void signin::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login.signin.name)
}
inline ::std::string* signin::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:login.signin.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* signin::release_name() {
  // @@protoc_insertion_point(field_release:login.signin.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void signin::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:login.signin.name)
}

// string passwd = 4;
inline void signin::clear_passwd() {
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& signin::passwd() const {
  // @@protoc_insertion_point(field_get:login.signin.passwd)
  return passwd_.GetNoArena();
}
inline void signin::set_passwd(const ::std::string& value) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:login.signin.passwd)
}
#if LANG_CXX11
inline void signin::set_passwd(::std::string&& value) {
  
  passwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login.signin.passwd)
}
#endif
inline void signin::set_passwd(const char* value) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login.signin.passwd)
}
inline void signin::set_passwd(const char* value, size_t size) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login.signin.passwd)
}
inline ::std::string* signin::mutable_passwd() {
  
  // @@protoc_insertion_point(field_mutable:login.signin.passwd)
  return passwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* signin::release_passwd() {
  // @@protoc_insertion_point(field_release:login.signin.passwd)
  
  return passwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void signin::set_allocated_passwd(::std::string* passwd) {
  if (passwd != NULL) {
    
  } else {
    
  }
  passwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passwd);
  // @@protoc_insertion_point(field_set_allocated:login.signin.passwd)
}

// string sdkid = 5;
inline void signin::clear_sdkid() {
  sdkid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& signin::sdkid() const {
  // @@protoc_insertion_point(field_get:login.signin.sdkid)
  return sdkid_.GetNoArena();
}
inline void signin::set_sdkid(const ::std::string& value) {
  
  sdkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:login.signin.sdkid)
}
#if LANG_CXX11
inline void signin::set_sdkid(::std::string&& value) {
  
  sdkid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login.signin.sdkid)
}
#endif
inline void signin::set_sdkid(const char* value) {
  
  sdkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login.signin.sdkid)
}
inline void signin::set_sdkid(const char* value, size_t size) {
  
  sdkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login.signin.sdkid)
}
inline ::std::string* signin::mutable_sdkid() {
  
  // @@protoc_insertion_point(field_mutable:login.signin.sdkid)
  return sdkid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* signin::release_sdkid() {
  // @@protoc_insertion_point(field_release:login.signin.sdkid)
  
  return sdkid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void signin::set_allocated_sdkid(::std::string* sdkid) {
  if (sdkid != NULL) {
    
  } else {
    
  }
  sdkid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdkid);
  // @@protoc_insertion_point(field_set_allocated:login.signin.sdkid)
}

// -------------------------------------------------------------------

// signup

// string token = 1;
inline void signup::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& signup::token() const {
  // @@protoc_insertion_point(field_get:login.signup.token)
  return token_.GetNoArena();
}
inline void signup::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:login.signup.token)
}
#if LANG_CXX11
inline void signup::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login.signup.token)
}
#endif
inline void signup::set_token(const char* value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login.signup.token)
}
inline void signup::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login.signup.token)
}
inline ::std::string* signup::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:login.signup.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* signup::release_token() {
  // @@protoc_insertion_point(field_release:login.signup.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void signup::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:login.signup.token)
}

// string name = 3;
inline void signup::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& signup::name() const {
  // @@protoc_insertion_point(field_get:login.signup.name)
  return name_.GetNoArena();
}
inline void signup::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:login.signup.name)
}
#if LANG_CXX11
inline void signup::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login.signup.name)
}
#endif
inline void signup::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login.signup.name)
}
inline void signup::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login.signup.name)
}
inline ::std::string* signup::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:login.signup.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* signup::release_name() {
  // @@protoc_insertion_point(field_release:login.signup.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void signup::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:login.signup.name)
}

// string passwd = 4;
inline void signup::clear_passwd() {
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& signup::passwd() const {
  // @@protoc_insertion_point(field_get:login.signup.passwd)
  return passwd_.GetNoArena();
}
inline void signup::set_passwd(const ::std::string& value) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:login.signup.passwd)
}
#if LANG_CXX11
inline void signup::set_passwd(::std::string&& value) {
  
  passwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login.signup.passwd)
}
#endif
inline void signup::set_passwd(const char* value) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login.signup.passwd)
}
inline void signup::set_passwd(const char* value, size_t size) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login.signup.passwd)
}
inline ::std::string* signup::mutable_passwd() {
  
  // @@protoc_insertion_point(field_mutable:login.signup.passwd)
  return passwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* signup::release_passwd() {
  // @@protoc_insertion_point(field_release:login.signup.passwd)
  
  return passwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void signup::set_allocated_passwd(::std::string* passwd) {
  if (passwd != NULL) {
    
  } else {
    
  }
  passwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passwd);
  // @@protoc_insertion_point(field_set_allocated:login.signup.passwd)
}

// string sdkid = 5;
inline void signup::clear_sdkid() {
  sdkid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& signup::sdkid() const {
  // @@protoc_insertion_point(field_get:login.signup.sdkid)
  return sdkid_.GetNoArena();
}
inline void signup::set_sdkid(const ::std::string& value) {
  
  sdkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:login.signup.sdkid)
}
#if LANG_CXX11
inline void signup::set_sdkid(::std::string&& value) {
  
  sdkid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login.signup.sdkid)
}
#endif
inline void signup::set_sdkid(const char* value) {
  
  sdkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login.signup.sdkid)
}
inline void signup::set_sdkid(const char* value, size_t size) {
  
  sdkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login.signup.sdkid)
}
inline ::std::string* signup::mutable_sdkid() {
  
  // @@protoc_insertion_point(field_mutable:login.signup.sdkid)
  return sdkid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* signup::release_sdkid() {
  // @@protoc_insertion_point(field_release:login.signup.sdkid)
  
  return sdkid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void signup::set_allocated_sdkid(::std::string* sdkid) {
  if (sdkid != NULL) {
    
  } else {
    
  }
  sdkid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdkid);
  // @@protoc_insertion_point(field_set_allocated:login.signup.sdkid)
}

// -------------------------------------------------------------------

// ping

// string hello = 1;
inline void ping::clear_hello() {
  hello_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ping::hello() const {
  // @@protoc_insertion_point(field_get:login.ping.hello)
  return hello_.GetNoArena();
}
inline void ping::set_hello(const ::std::string& value) {
  
  hello_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:login.ping.hello)
}
#if LANG_CXX11
inline void ping::set_hello(::std::string&& value) {
  
  hello_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login.ping.hello)
}
#endif
inline void ping::set_hello(const char* value) {
  
  hello_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login.ping.hello)
}
inline void ping::set_hello(const char* value, size_t size) {
  
  hello_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login.ping.hello)
}
inline ::std::string* ping::mutable_hello() {
  
  // @@protoc_insertion_point(field_mutable:login.ping.hello)
  return hello_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ping::release_hello() {
  // @@protoc_insertion_point(field_release:login.ping.hello)
  
  return hello_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ping::set_allocated_hello(::std::string* hello) {
  if (hello != NULL) {
    
  } else {
    
  }
  hello_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hello);
  // @@protoc_insertion_point(field_set_allocated:login.ping.hello)
}

// -------------------------------------------------------------------

// pong

// string hello = 1;
inline void pong::clear_hello() {
  hello_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& pong::hello() const {
  // @@protoc_insertion_point(field_get:login.pong.hello)
  return hello_.GetNoArena();
}
inline void pong::set_hello(const ::std::string& value) {
  
  hello_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:login.pong.hello)
}
#if LANG_CXX11
inline void pong::set_hello(::std::string&& value) {
  
  hello_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login.pong.hello)
}
#endif
inline void pong::set_hello(const char* value) {
  
  hello_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login.pong.hello)
}
inline void pong::set_hello(const char* value, size_t size) {
  
  hello_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login.pong.hello)
}
inline ::std::string* pong::mutable_hello() {
  
  // @@protoc_insertion_point(field_mutable:login.pong.hello)
  return hello_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pong::release_hello() {
  // @@protoc_insertion_point(field_release:login.pong.hello)
  
  return hello_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pong::set_allocated_hello(::std::string* hello) {
  if (hello != NULL) {
    
  } else {
    
  }
  hello_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hello);
  // @@protoc_insertion_point(field_set_allocated:login.pong.hello)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace login

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2flogin_2eproto__INCLUDED
