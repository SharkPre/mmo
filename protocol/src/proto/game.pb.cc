// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/game.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/game.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace game {
class loginDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<login> {
} _login_default_instance_;

namespace protobuf_proto_2fgame_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login, role_id_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(login)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_login_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "proto/game.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _login_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _login_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\020proto/game.proto\022\004game\"\030\n\005login\022\017\n\007rol"
      "e_id\030\001 \001(\rb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 58);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/game.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_proto_2fgame_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int login::kRoleIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

login::login()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2fgame_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.login)
}
login::login(const login& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  role_id_ = from.role_id_;
  // @@protoc_insertion_point(copy_constructor:game.login)
}

void login::SharedCtor() {
  role_id_ = 0u;
  _cached_size_ = 0;
}

login::~login() {
  // @@protoc_insertion_point(destructor:game.login)
  SharedDtor();
}

void login::SharedDtor() {
}

void login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* login::descriptor() {
  protobuf_proto_2fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fgame_2eproto::file_level_metadata[0].descriptor;
}

const login& login::default_instance() {
  protobuf_proto_2fgame_2eproto::InitDefaults();
  return *internal_default_instance();
}

login* login::New(::google::protobuf::Arena* arena) const {
  login* n = new login;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void login::Clear() {
// @@protoc_insertion_point(message_clear_start:game.login)
  role_id_ = 0u;
}

bool login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game.login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 role_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game.login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game.login)
  return false;
#undef DO_
}

void login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game.login)
  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:game.login)
}

::google::protobuf::uint8* login::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:game.login)
  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:game.login)
  return target;
}

size_t login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.login)
  size_t total_size = 0;

  // uint32 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void login::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.login)
  GOOGLE_DCHECK_NE(&from, this);
  const login* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const login>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.login)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.login)
    MergeFrom(*source);
  }
}

void login::MergeFrom(const login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.login)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
}

void login::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login::CopyFrom(const login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login::IsInitialized() const {
  return true;
}

void login::Swap(login* other) {
  if (other == this) return;
  InternalSwap(other);
}
void login::InternalSwap(login* other) {
  std::swap(role_id_, other->role_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata login::GetMetadata() const {
  protobuf_proto_2fgame_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fgame_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// login

// uint32 role_id = 1;
void login::clear_role_id() {
  role_id_ = 0u;
}
::google::protobuf::uint32 login::role_id() const {
  // @@protoc_insertion_point(field_get:game.login.role_id)
  return role_id_;
}
void login::set_role_id(::google::protobuf::uint32 value) {
  
  role_id_ = value;
  // @@protoc_insertion_point(field_set:game.login.role_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace game

// @@protoc_insertion_point(global_scope)
